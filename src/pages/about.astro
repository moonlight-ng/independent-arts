---
import team from "@data/team.json";
//Components
import Layout from "@layout/Default.astro";
import PageHeader from "@components/PageHeader.astro";
import ProfileCard from "@components/ProfileCard.astro";
//Data
import opemipo from "@images/team/opemipo.png"
import nneoma from "@images/team/nneoma.png"
import williams from "@images/team/williams.png"
import agnes from "@images/team/agnes.png"
import tomiwa from "@images/team/tomiwa.png"
import experiments from "@data/manifestoLinks.json";

const header = {
	title: "is a non-profit studio.",
	description: "Right now, we're making publishing experiments. Long term, we're trying to become a community-funded, community-run support system for independent publishers."
}

const teamImages = {
	"opemipo": opemipo,
	"nneoma": nneoma,
	"williams": williams,
	"agnes": agnes,
	"tomiwa": tomiwa,
}

const teamMemberData = team.reduce((acc, teamMember, index) => {
	return {
		...acc,
		[teamMember.id]: {
			...teamMember,
			image: teamImages[teamMember.id],
		}
	}
}, {})

---

<Layout>
	<main>
		<PageHeader {...header} />
		<section class="l-section">
			<div class="l-container l-grid">
				<div class="c-section__left l-grid__column--6">
					<h4 class="c-section-title">Team</h4>
					<ul class="c-team" id="teamList">
						{team.map(({name, role, description, id , link, linkText}) => (
						<li class="c-team__member" data-member={id}>
							<div class="image">
								<ProfileCard title={name} description={role} imageLink={teamImages[id]} size="small" />
							</div>
							<div>
								<p>{ description }</p>
								<div class="footer">
									<a class="c-link c-link--out" href={link}>{linkText}</a>
								</div>
							</div>
						</li>
						))}
					</ul>
				</div>
				<aside class="c-section__right l-grid__column-start--8 l-grid__column--3">
					<h4 class="c-section-title">Manifesto</h4>
					<ol class="experiment-list">
						{experiments.map(({ question, answer }) => (
						<li class={answer && answer.length>= 1 ? 'active' : 'inactive'}>
							<a href={answer && answer.length>= 1 ? answer : '#'}>{question}</a>
						</li>
						))}
					</ol>
				</aside>
			</div>
		</section>
		<dialog id="modal" class="c-modal c-modal--team">
			<div class="l-container">
				<div class="c-modal__content">
					<button class="c-modal__close">
						<svg class="c-modal__close-icon" fill="none" xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 19 18">
							<path stroke="#000" stroke-width="2"
								d="m2.012 1.515 15.556 15.556M1.598 17.071 17.154 1.514" />
						</svg>
					</button>
					<div class="c-modal__body">
						<template id="userTemplate">
							<ProfileCard title="{full_name}" description="{role}" imageLink={teamImages.nneoma}
								size="regular" />
							<p data-bio>placeholder bio</p>
							<div class="footer" data-footer>
								<a href="https://google.com" target="_blank">placeholder_url</a>
							</div>
						</template>
					</div>
				</div>
			</div>
		</dialog>
	</main>
</Layout>

<style lang="scss">
	@import "../styles/mixins.scss";

	.c-modal {
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		z-index: var(--z-index--10);
		background: var(--color-white);
		border: 0;
		padding: 0;
		margin: 0;

		&::backdrop {
			margin: 0;
			padding: 0;
			background-color: #fff;
		}

		& dialog:-internal-modal-dialog {
			margin: 0;
			padding: 0;
			background: var(--color-white);
		}

		&__content {
			margin-top: var(--spacer-base);
			position: relative;
		}

		&__close {
			position: absolute;
			width: 100%;
			height: 28px;
			max-width: 28px;
			display: grid;
			place-items: center;
			top: -32px;
			right: 0;
			background-color: transparent;
			border: 0;
		}

		&__body {
			margin-block-start: calc(var(--spacer-base) * 2);

			p {
				--margin: calc(var(--spacer-base) / 2);
				margin-block-start: var(--margin);
				margin-top: var(--margin);
			}

			.footer {
				font-style: italic;
				padding-block-end: 28px;
				margin-block-end: 0;
				position: relative;
				margin-block-start: calc(var(--spacer-base) / 1.5);

				&:hover {
					&::after {
						animation: animatedBackground .35s linear infinite both;
					}
				}

				&::after {
					--divider-height: 16px;
					content: '';
					position: absolute;
					bottom: 0;
					left: 0;
					right: 0;
					height: var(--divider-height);
					background: linear-gradient(90deg, var(--color-light-gray) 50%, transparent 50%, transparent 100%),
						linear-gradient(90deg, transparent 50%, var(--color-light-gray) 50%, var(--color-light-gray) 100%);
					background-position: 0 0, 0 calc(var(--divider-height) / 2);
					background-size: var(--divider-height) 50%;
					background-repeat: repeat no-repeat;
					transition: background-size .35s linear;

					@keyframes animatedBackground {
						to {
							background-position: 32px 0, 32px calc(var(--divider-height) / 2);
						}
					}
				}

				p {
					position: relative;
					margin-bottom: 0;
				}
			}
		}
	}

	.c-team,
	.experiment-list {
		padding: var(--spacer-base) 0;
	}

	.c-section-title {
		background: var(--color-white);
	}

	.c-team__member {
		display: flex;
		flex-flow: row nowrap;
		gap: 48px;

		@include screen('small') {
			box-shadow: 0px 0px 1px 0px hsla(210, 7%, 28%, 0.32);
			flex-direction: column;
			gap: 16px;
			padding: calc(var(--spacer-base) / 4);
		}

		&+& {
			margin-top: var(--spacer-base);
			margin-block-start: var(--spacer-base);

			@include screen('small') {
				margin-top: calc(var(--spacer-base) / 4);
				margin-block-start: calc(var(--spacer-base) / 4);
			}
		}

		.image {
			flex: 1 0 320px;

			@include screen('small') {
				padding-top: 0;
				padding-block-start: 0;
				flex-basis: auto;
			}
		}

		p {
			line-height: 1.3;
			margin-top: 0;
			margin-block-start: 0;

			@include screen('small') {
				display: none;
			}
		}
	}

	.c-section__right {
		@include screen('small') {
			display: none;
		}
	}

	.c-section__left {
		@include screen('small') {
			grid-column: 1 / -1;
		}
	}

	.experiment-list {
		font-family: var(--font-sans);
		font-size: 1.8rem;
		line-height: 1.2;
		list-style-type: decimal;
		list-style-position: inside;

		.inactive a,
		li.inactive {
			color: var(--color-dark-gray);
			cursor: not-allowed;

			&:hover {
				animation: none;
			}
		}

		a {
			font-style: normal;
		}

		>*+* {
			margin-top: calc(var(--spacer-base) / 2);
		}
	}
</style>

<script define:vars={{ teamMemberData }}>
	const modal = document.getElementById('modal');
	const modalTemplate = document.getElementById('userTemplate');
	const modalBody = document.querySelector('#modal .c-modal__body');

	const openModal = (member) => {
		const clonedTemplate = modalTemplate.content.cloneNode(true);
		const avatar = clonedTemplate.querySelector('img');
		const name = clonedTemplate.querySelector('[data-name]');
		const description = clonedTemplate.querySelector('[data-description]');
		const bio = clonedTemplate.querySelector('[data-bio]');
		const link = clonedTemplate.querySelector('a');

		// Update the modal with the member data
		avatar.src = member.image;
		name.textContent = member.name;
		description.textContent = member.role;
		bio.textContent = member.description;
		link.href = member.link;
		link.textContent = member.linkText;

		// Empty the modal body and append the new content
		modal.show();
		document.querySelector('body').style.overflow = 'hidden';
		while (modalBody.hasChildNodes()) {
			modalBody.removeChild(modalBody.firstChild);
		}
		modalBody.appendChild(clonedTemplate)
		// Close the modal when the user clicks the close button
		modal.querySelector('.c-modal__close').addEventListener('click', () => {
			modal.close();
			document.querySelector('body').style.overflow = null;
		});
	}

	// Open the modal when the user clicks a team member
	const teamList = document.getElementById('teamList');
	const listenForModalClick = () => {
		const isMobileDevice = window.innerWidth < 500 ? 1 : 0;
		teamList.addEventListener('click', (e) => {
			isMobileDevice && !!e.target.closest('li') && openModal(teamMemberData[e.target.closest('li').dataset.member]);
		});
	}
	listenForModalClick();
	window.addEventListener('resize', listenForModalClick);
</script>